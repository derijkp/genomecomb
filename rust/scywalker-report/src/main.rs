// this tool will generate a QC report from files generated by the scywalker pipeline
// its input is the sample directory in which a bunch of files are created by the pipeline
// the output is a QC report in html and tsv format

// use clap for argument parsing

use clap::Parser;
use log::info;
use std::path::Path;

mod cell_info;
mod exons_vs_length;
mod knee;
mod layout;
mod parse_bam;
mod parse_cramino;
mod read_assignment;
mod utils;

#[derive(Parser, Debug)]
#[clap(author, version, about="Create report for scywalker pipeline.", long_about = None)]
struct Cli {
    /// The sample directory in which the pipeline has been run
    #[arg()]
    directory: String,

    /// The output file for the report
    #[arg(short, long, default_value = "report.html")]
    output: String,
}

fn main() -> Result<(), Box<dyn std::error::Error>> {
    env_logger::init();
    let args = Cli::parse();
    // check that the directory exists
    if !Path::new(&args.directory).exists() {
        panic!("Provided directory {} does not exist", args.directory);
    }
    info!("Gathering information");
    let cramino_table =
        parse_cramino::parse_cramino(&args.directory).expect("Failed to parse cramino");
    let knee = knee::knee_plot(&args.directory).expect("Failed to create knee plot");
    let exons_vs_length = exons_vs_length::plot(&args.directory).expect("Failed to plot exons");
    let cell_info =
        cell_info::genes(&args.directory, knee.metrics).expect("Failed to get cell info");
    let read_assignment =
        read_assignment::plot(&args.directory).expect("Failed to plot read assignment");
    let umaptype = get_umaptype(&args.directory).expect("Failed to get umap");
    let umap = get_umap(&args.directory).expect("Failed to get umap");
    let report = format!(
        "<html>
            <head>
                <title>QC report</title>
                <style>{css}</style>
                <script src=\"https://cdn.plot.ly/plotly-1.54.6.min.js\"></script>
            </head> \
            <body>
                <h1>Scywalker QC report</h1>
                <div id=\"wrapper\">
                    <div id=\"cramino\">{cramino_table}</div>
                    <div id=\"cell_info\">{cell_info_table}</div>
                </div>
                    {knee_html}
                    {exons_vs_length_length}
                    {exons_vs_length_exons}
                    {cell_info_plot}
                    {read_assignment}
                    {umaptype}
                    {umap}
            </body>
        </html>",
        css = include_str!("style.css"),
        cell_info_table = cell_info.table,
        knee_html = knee.html,
        exons_vs_length_exons = exons_vs_length.exon_vs_length,
        exons_vs_length_length = exons_vs_length.length,
        cell_info_plot = cell_info.plot,
    );
    std::fs::write(args.output, report)?;
    info!("Report written");
    Ok(())
}

fn get_umaptype(directory: &str) -> Result<String, Box<dyn std::error::Error>> {
    // this function converts the umap png to a base64 string
    // so that it can be embedded in the html
    // this output is optional, so the file is not guaranteed to exist
    let path = utils::find_file(
        directory,
        "sc_celltype_umap-sctype-isoquant_sc-sminimap2_splice*.png",
    );
    if path.is_none() {
        info!("No umap produced");
        Ok("".to_string())
    } else {
        info!("Found umap");
        let b64 = image_base64::to_base64(
            &path
                .expect("Weirdly enough, no umap was found. This should not happen.")
                .as_path()
                .display()
                .to_string(),
        ); // Pass the PathBuf as a reference
        info!("Gathered umap");
        Ok(format!("<div class=\"plot\"><h2>Cell type classification</h2><img class=\"img\" src=\"{b64}\"></div>"))
    }
}

fn get_umap(directory: &str) -> Result<String, Box<dyn std::error::Error>> {
    // this function converts the umap png to a base64 string
    // so that it can be embedded in the html
    // this output is optional, so the file is not guaranteed to exist
    let path = utils::find_file(
        directory,
        "sc_umap-isoquant_sc-sminimap2_splice*.png",
    );
    if path.is_none() {
        info!("No umap produced");
        Ok("".to_string())
    } else {
        info!("Found umap");
        let b64 = image_base64::to_base64(
            &path
                .expect("Weirdly enough, no umap was found. This should not happen.")
                .as_path()
                .display()
                .to_string(),
        ); // Pass the PathBuf as a reference
        info!("Gathered umap");
        Ok(format!("<div class=\"plot\"><h2>Cell clustering (Seurat UMAP)</h2><img class=\"img\" src=\"{b64}\"></div>"))
    }
}
