proc cg_sam2tsv {args} {
	set samfile -
	set outfile -
	set namecol name
	set informat sam
	array set fieldinfoa {
		AS {i:Alignment score generated by aligner}
		XS {i:strand the RNA that produced this read came from}
		MQ {i:Mapping quality of the mate/next segment}
		MC {Z:CIGAR string for mate/next segment}
		ms {i:DP score of the max scoring segment in the alignment}
		MD {Z:String for mismatching positions}
		NM {i:Total number of mismatches and gaps in the alignment}
		RG {Z:Read group}
		AM {i:The smallest template-independent mapping quality in the template}
		BC {Z:Barcode sequence identifying the sample}
		BQ {Z:Offset to base alignment quality (BAQ)}
		BZ {Z:Phred quality of the unique molecular barcode bases in the OX tag}
		CB {Z:Cell identifier}
		CC {Z:Reference name of the next hit}
		CG {B,I:BAM only: CIGAR in BAM's binary encoding if (and only if) it consists of >65535 operators}
		CM {i:Reference name of the next hit; = for the same chromosome}
		CO {Z:Free-text comments}
		CP {i:Leftmost coordinate of the next hit}
		CQ {Z:Color read base qualities}
		CR {Z:Cellular barcode sequence bases (uncorrected)}
		CS {Z:Color read sequence}
		CT {Z:Complete read annotation tag, used for consensus annotation dummy features}
		CY {Z:Phred quality of the cellular barcode sequence in the CR tag}
		E2 {Z:The 2nd most likely base calls}
		FI {i:The index of segment in the template}
		FS {Z:Segment suffix}
		FZ {B,S:Flow signal intensities}
		H0 {i:Number of perfect hits}
		H1 {i:Number of 1-difference hits (see also NM)}
		H2 {i:Number of 2-difference hits}
		HI {i:Query hit index}
		IH {i:Query hit total count}
		LB {Z:Library}
		MI {Z:Molecular identifier; a string that uniquely identifies the molecule from which the record was derived}
		NH {i:Number of reported alignments that contain the query in the current record}
		OA {Z:Original alignment}
		OC {Z:Original CIGAR (deprecated; use OA instead)}
		OP {i:Original mapping position (deprecated; use OA instead)}
		OQ {Z:Original base quality}
		OX {Z:Original unique molecular barcode bases}
		PG {Z:Program}
		PQ {i:Phred likelihood of the template}
		PT {Z:Read annotations for parts of the padded read sequence}
		PU {Z:Platform unit}
		Q2 {Z:Phred quality of the mate/next segment sequence in the R2 tag}
		QT {Z:Phred quality of the sample barcode sequence in the BC tag}
		QX {Z:Quality score of the unique molecular identifier in the RX tag}
		R2 {Z:Sequence of the mate/next segment in the template}
		RX {Z:Sequence bases of the (possibly corrected) unique molecular identifier}
		SA {Z:Other canonical alignments in a chimeric alignment}
		SM {i:Template-independent mapping quality}
		TC {i:The number of segments in the template}
		U2 {Z:Phred probability of the 2nd call being wrong conditional on the best being wrong}
		UQ {i:Phred likelihood of the segment, conditional on the mapping being correct}
		tp {A:Type of aln: P/primary, S/secondary and I,i/inversion}
		cm {i:Number of minimizers on the chain}
		s1 {i:Chaining score}
		s2 {i:Chaining score of the best secondary chain}
		nn {i:Number of ambiguous bases in the alignment}
		ts {A:Transcript strand (splice mode only)}
		cs {Z:Difference string}
		dv {f:Approximate per-base sequence divergence}
		de {f:Gap-compressed per-base sequence divergence}
		rl {i:Length of query regions harboring repetitive seeds}
	}
	set fields {}
	cg_options sam2tsv args {
		-informat {set informat $value}
		-fields {
			set fields {}
			foreach el $value {
				set split [split $el :]
				if {[llength $split] == 1} {
					set field [lindex $split 0]
					set el $field:[get fieldinfoa($field) Z:]
				} elseif {[llength $split] == 2} {
					append el :
				}
				lappend fields $el
			}
		}
		-addfields {
			lappend fields $value
		}
	} {samfile outfile} 0
	if {[file extension $samfile] in ".bam .cram"} {
		set informat bam
	} elseif {[file extension $samfile] eq ".sam"} {
		set informat sam
	}
	if {$informat eq "bam"} {
		if {$samfile eq "-"} {
			set pipe [list samtools view -h \| sam2tsv {*}$fields <@ stdin]
		} else {
			set pipe [list samtools view -h $samfile \| sam2tsv {*}$fields]
		}
	} elseif {$samfile eq "-"} {
		set pipe [list sam2tsv {*}$fields <@ stdin]
	} else {
		set pipe [list {*}[gzcat $samfile] $samfile \| sam2tsv {*}$fields]
	}
	if {$outfile eq "-"} {
		lappend pipe >@ stdout
	} else {
		lappend pipe > $outfile
	}
	if {$samfile eq "-"} {
		lappend pipe <@ stdin
	}
	catch_exec {*}$pipe
}

proc cg_bam2tsv {args} {
	cg_sam2tsv -informat bam {*}$args
}
