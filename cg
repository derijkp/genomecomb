#!/bin/sh
# the next line restarts using wish \
exec tclsh "$0" ${1+"$@"}

#
# Copyright (c) by Peter De Rijk (VIB - University of Antwerp)
# See the file "license.txt" for information on usage and redistribution of
# this file, and for a DISCLAIMER OF ALL WARRANTIES.
#

# see where we are, add the lib dir in the original location to auto_path, load extension
set script [file join [pwd] [info script]]
set scriptname [file tail $script]
while 1 {
	if {[catch {set script [file join [pwd] [file readlink $script]]}]} break
}

set appdir [file dir $script]
if {[lrange [file split $script] end-2 end] eq {apps cg cg.tcl}} {
	set appbasedir [file dir [file dir $appdir]]
	set auto_path [list $appbasedir/lib $appbasedir/lib/tcl8.5 $appbasedir/lib/tk8.5]
}
lappend auto_path $appdir/lib $appdir/lib-exp
source $appdir/lib/file.tcl
package require Extral
package require genomecomb
genomecombenv

# generic help on no args
if {[llength $argv] < 1} {
	cg_help
}

proc parse_generic_args {subcmd argslist} {
	if {[llength $argslist] == 1 && [inlist {-h -help --help} $argslist]} {
		if {[catch {help $subcmd} msg]} {
			puts stderr $msg
			exit 1
		}
		exit 0
	}
	set ::stacktraceonerror 0
	while 1 {
		set arg [lindex $argslist 0]
		if {$arg in "--verbose -verbose -v"} {
			set value [lindex $argslist 1]
			if {![isint $value]} {error "$value is not a number, only numbers are accepted as value for -v (--verbose)"}
			logverbose $value
			set argslist [lrange $argslist 2 end]
		} elseif {$arg in "--stack -stack"} {
			set value [lindex $argslist 1]
			if {$value in {0 1}} {
				set ::stacktraceonerror $value
				set argslist [lrange $argslist 2 end]
			} else {
				error "$value is not 0 or 1, the only accepted values for --stack"
			}
		} else {
			break
		}
	}
	return $argslist
}

set action [list_shift argv]
set args $argv
unset -nocomplain argv
if {[auto_load cg_$action]} {
	set args [parse_generic_args $action $args]
	set ::base "cg $action"
	if {[catch {cg_$action {*}$args} msg]} {
		if {!$stacktraceonerror} {
			puts stderr $msg
			exit 1
		} else {
			puts stderr "$::errorInfo"
			exit 1
		}
	}
} elseif {[file executable $::appdir/plugins/cg_$action]} {
	if {[llength $args] == 1 && [inlist {-h --help} $args]} {
		help $action
		exit 0
	}
	exec $::appdir/plugins/cg_$action {*}$args <@ stdin >@ stdout 2>@ stderr
} else {
	puts stderr "ERROR: unkown action $action"
	puts stderr "must be one of: [join [help_actions] ", "], ..."
	puts stderr "For more help use:\ncg help"
	exit 1
}
