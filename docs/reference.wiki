= Genomecomb 0.108.0 Reference =

== Format ==
cg subcommand ?options? ....

== Description ==
This help page gives a (reference style) overview of all genomecomb functions. For an 
introductory text to genomecomb and its formats, use
{{{
cg help intro
}}}
All genomecombs functions are called using the cg command and a subcommand. 
The available subcommands are listed on this page (in categories) with a short description.
To get further info on how to use the subcommands and their parameters, use
{{{
cg help subcommand
}}}
or 
{{{
cg subcommand -h
}}}

== Options ==
The following options are generic and available for all subcommands. They must however
always preceed the subcommand specific options.
; -v number (--verbose): Setting this to 1 or 2 (instead of the default 0) makes some subcommands chattier about their progress.
At the given number is 1, logging messages are shown (warnings, start of subtask, etc.)
If the number >= 2, progress counters are also shown (for commands that support them)
; --stack 0/1: When the program returns an error, by default only the error message is shown,
which is normally ok to show errors in input format, etc.
if --stack is set to 1, a full stack trace is shown on error (which may be useful to solve 
errors caused by bugs in the program)

Many commands will transparantly compress a result file if it has an extension 
indicating this (.zst, .gz, ...). Following options are for this case:
; -compressionlevel number: number indicating the level of compression (1 for fast 
compression, higher numbers for better but slower compression) used when resultfiles
are to be compressed
; -compressionthreads number: Use **number** [[cg_threads (default 1) to compress the result 
file (if the result needs to be compressed, and the compression method supports threads)

== Available subcommands ==

=== Process ===
; [[cg_process_project|process_project]]|threads (default 1) to compress the result 
file (if the result needs to be compressed, and the compression method supports threads)

== Available subcommands ==

=== Process ===
; [[cg_process_project|process_project]]]]: process a sequencing project directory ([[projectdir]]), generating full
analysis information (variant calls, multicompar, reports, ...) starting
from raw sample data from various sources.
; [[cg_makerefdb|makerefdb]]: Create a reference sequence and annotation databases directory
; [[cg_process_multicompar|process_multicompar]]: process a sequencing project directory. 
This expects a genomecomb directory with samples already processed and
makes annotated multicompar data
; [[cg_process_reports|process_reports]]: Calculates a number of statistics on a sample in the reports subdir
; [[cg_process_rtgsample|process_rtgsample]]: Convert rtg data to cg format
; [[cg_process_sample|process_sample]]: Processes one sample directory ([[projectdir]]), generating full analysis
information (variant calls, multicompar, reports, ...) starting from raw
sample data that can come from various sources.
; [[cg_project_addsample|project_addsample]]: Add a sample directory to a project directory.
; [[cg_renamesamples|renamesamples]]: Converts the sample names in a file or entire directory to other names.

=== Query ===
; [[cg_select|select]]: Command for very flexible selection, sorting and conversion of tab separated files
; [[cg_viz|viz]]: grahical vizualization of tsv files (even very large ones) as table without loading everything into memory
; [[cg_multiselect|multiselect]]: Command for using cg select on multiple files, and combine the results
; [[cg_groupby|groupby]]: Group lines in a tsv file, based on 1 or more identical fields


=== Analysis ===
; [[cg_exportplink|exportplink]]: make a plink "Transposed fileset" from the genome data
; [[cg_homwes|homwes]]: finds regions of homozygosity based on a variant file
; [[cg_homwes_compare|homwes_compare]]: finds regions of homozygosity based on a variant file

=== Regions ===
; [[cg_multireg|multireg]]: Compare multiple regions files
; [[cg_regselect|regselect]]: select all regions or variants in file that overlap with regions in region_select_file
; [[cg_covered|covered]]: Find number of bases covered by regions in a region file
; [[cg_regcollapse|regcollapse]]: Collapses overlapping regions in one (sorted) or more region files
; [[cg_regcommon|regcommon]]: list regions common between region_file1 and region_file2
; [[cg_regextract|regextract]]: Find regions with a minimum or maximum coverage in a bam, sam, cram, bcol or tsv file.
; [[cg_regjoin|regjoin]]: join regions in 1 or 2 regionfiles
; [[cg_regsubtract|regsubtract]]: subtract regions in region_file2 from region_file1

=== Annotation ===
; [[cg_annotate|annotate]]: Annotate a variant file with region, gene or variant data
; [[cg_download_biograph|download_biograph]]: download_biograph gene rank data from biograph.
; [[cg_download_mart|download_mart]]: Download data from biomart
; [[cg_geneannot2reg|geneannot2reg]]: Creates a (region) annotation file based on a genelist with annotations.

=== Validation ===
; [[cg_genome_seq|genome_seq]]: Returns sequences of regions in the genome (fasta file), optionally masked for snps/repeats
; [[cg_makeprimers|makeprimers]]: Make sequencing primers for Sanger validation experiments
; [[cg_makesequenom|makesequenom]]: Make input files for designing sequenom validation experiments
; [[cg_primercheck|primercheck]]: check primer sets for multiple amplicons and snps
; [[cg_validatesv|validatesv]]

=== Variants ===
; [[cg_multicompar|multicompar]]: Compare multiple variant files
; [[cg_multicompar_reannot|multicompar_reannot]]: Reannotate multicompar file
; [[cg_multicount|multicount]]: Compare multiple count files
; [[cg_pmulticompar|pmulticompar]]: Compare multiple variant files
; [[cg_process_sv|process_sv]]: Do all steps on a Complete Genomics sample to generate structural variant calls
; [[cg_sv|sv]]: generic command to call structural variants based on the alignment in bamfile.
; [[cg_svmulticompar|svmulticompar]]: Compare multiple structural variant files
; [[cg_var|var]]: generic command to call variants based on the alignment in bamfile.

=== tsv ===
; [[cg_cat|cat]]: Concatenate tab separated files and print on the standard output (stripping headers of files 
other than the first).
; [[cg_checktsv|checktsv]]: Checks the given tsv file for errors
; [[cg_collapsealleles|collapsealleles]]: Convert a split variant file to unsplit by collapsing alleles of the same variant into one line.
; [[cg_graph|graph]]: Visualization of large tsv files as a scatter plot
; [[cg_index|index]]: make indices for a tsv file
; [[cg_less|less]]: view a (possibly compressed) file using the pager less.
; [[cg_paste|paste]]: merge lines of tab separated files.
; [[cg_split|split]]: split a tab separated file in multiple tab separated files based on the content of a (usually chromosome) field.
; [[cg_tsvjoin|tsvjoin]]: join two tsv files based on common fields (must be sorted).

=== Conversion ===
; [[cg_sam_clipamplicons|sam_clipamplicons]]: Clip primers from aligned sequences in a sam file (by changing bases to N
and quality to 0) given a set of target amplicons.
; [[cg_liftover|liftover]]: Use liftover to convert a variant file from one build to another
; [[cg_liftregion|liftregion]]: Use liftover to convert a region file from one build to another
; [[cg_liftsample|liftsample]]: Use liftover to convert the files from a sample (variant, region, ...) from one build to another
; [[cg_liftchain2tsv|liftchain2tsv]]: Converts data in UCSC chain file format (for liftOver) to a tsv (tab separated) format to be used
in e.g. cg liftregion.
; [[cg_correctvariants|correctvariants]]: Complete or correct a variants file
; [[cg_bam_sort|bam_sort]]: sort a bam file.
; [[cg_bamreorder|bamreorder]]: Changes the order of the contigs/chromosomes in a bam file
; [[cg_fastq_split|fastq_split]]: split a (large) fastq file in multiple smaller ones

=== Format Conversion ===
; [[cg_bam2fastq|bam2fastq]]: Extracts reads from a bamfile into fastq. 
The actual extraction is based on picard's SamToFastq or samtools bam2fq, but the data is 
prepared first (ao. sorted by name to avoid the problems caused by position sorted fq files)
; [[cg_bam2reg|bam2reg]]: Extract regions with a minimum coverage from a bam file.
; [[cg_bam2sam|bam2sam]]: convert bam (or cram) to sam, sorting chromosomes into natural sort order.
; [[cg_bcol|bcol]]: several commands for managing bcol files
; [[cg_bcol_get|bcol_get]]: Get a list of values from a bcol file
; [[cg_bcol_make|bcol_make]]: Creates a [[bcol]] file
; [[cg_bcol_table|bcol_table]]: Outputs the data in a [[bcol]] file as tab-separated
; [[cg_bcol_update|bcol_update]]: updates bcol file(s) in the old format to the new
; [[cg_bed2tsv|bed2tsv]]: Converts data in bed format to [[tsv]] format
; [[cg_cg2sreg|cg2sreg]]: Extracts sequenced region data from a Complete Genomics format file in tsv (tab separated, simple feature table) format.
The command will also sort the tsv appropriately.
; [[cg_cg2tsv|cg2tsv]]: Converts data in Complete Genomics format to tsv (tab separated, simple feature table) format.
The command will also sort the tsv appropriately.
The cggenefile is optional. It contains the CG gene annotations, which can be (best) left out as
these annotations (and more) can be done in genomecomb.
; [[cg_clc2tsv|clc2tsv]]: Converts output from the clc bio assembly cell snp caller to tsv format
; [[cg_colvalue|colvalue]]: Converts data in tsv format from a long key-value format to a wide column-value format
; [[cg_convcgcnv|convcgcnv]]: Convert the Complete Genomics CNV files to the cg format
; [[cg_convcgsv|convcgsv]]: Convert the Complete Genomics SV files to the cg format
; [[cg_csv2tsv|csv2tsv]]: Converts comma-separated value (csv) data to tab-sparated ([[tsv]])
; [[cg_gb2fasta|gb2fasta]]: Comverts a genbank file to a fasta file
The file may contain multiple sequences. The name of the sequence (in the fasta file)
is taken from one of the following fields (in order, if not empty or .):
LOCUS, VERSION, ACCESSION, KEYWORDS, DEFINITION
; [[cg_gene2reg|gene2reg]]: Extract gene elements from data in genepred-like format to a (tab separated) region file.
; [[cg_gff2tsv|gff2tsv]]: Converts data in gff format to gene tsv format
; [[cg_gtf2tsv|gtf2tsv]]: Converts data in gtf format to gene tsv (tab separated) format
; [[cg_keyvalue|keyvalue]]: Converts data in tsv format from wide format (data for each sample in separate columns) 
to keyvalue format.
; [[cg_long|long]]: Converts data in tsv format from wide format (data for each sample/analysis in separate columns) 
to long format (data for each sample/analysis in separate lines)
; [[cg_rtg2tsv|rtg2tsv]]: Converts data in rtg format to tsv format
; [[cg_sam2tsv|sam2tsv]]: Converts data in sam format to [[tsv]] format. The original sam header is
included in the comments. Extra fields in the sam file are kept as
field:type:value, but put together as a list in a column named other.
Optionally the values for some extra fields can be split into different
columns using the -fields option.
; [[cg_tsv2bed|tsv2bed]]: Converts data in tab-separated format ([[tsv]]) format to bed format.
By default it will create a minimal bed file by extracting chromosome,begin and end
from the input using the default fields.
; [[cg_tsv2csv|tsv2csv]]: Converts tab-sparated ([[tsv]]) data to comma-separated value (csv)
; [[cg_tsv2vcf|tsv2vcf]]: Converts data in genomecomb tab-separated variant format ([[tsv]]) to vcf.
; [[cg_vcf2tsv|vcf2tsv]]: Converts data in vcf format to genomecomb tab-separated variant file ([[tsv]]).
The command will also sort the tsv appropriately.
; [[cg_wide|wide]]: Converts data in tsv format from long format (data for each sample in separate lines) to
wide format (data for each sample in separate columns)

=== Report ===
; [[cg_bam_histo|bam_histo]]: create a report with coverage data of given regions in a bam file
; [[cg_coverage_report|coverage_report]]: generates coverage report for region of interest
A histo file is generated at the location of the bam file
; [[cg_depth_histo|depth_histo]]: makes a histogram of the depth in the given bamfile, subdivided in on- and oftarget regions
; [[cg_hsmetrics|hsmetrics]]: Creates a hsmetrics file using picard CalculateHsMetrics
; [[cg_predictgender|predictgender]]: predicts gender for a sample

=== Info ===
; [[cg_help|help]]: display help
; [[cg_version|version]]: return version information
; [[cg_versions|versions]]: return version information as a tsv

=== RNA ===
; [[cg_multigene|multigene]]: Compare multiple gene files
; [[cg_multitranscript|multitranscript]]: Compare multiple transcript files

=== Compression ===
; [[cg_bgzip|bgzip]]: Compresses files using bgzip
; [[cg_compress|compress]]: Compresses files using a choice of methods
; [[cg_job_update|job_update]]: updates the logfile of a command using [[joboptions]]
; [[cg_lz4|lz4]]: Compresses files using lz4
; [[cg_lz4ra|lz4ra]]: decompresses part of a lz4 compressed file
; [[cg_razip|razip]]: Compresses files using razip
; [[cg_unzip|unzip]]: Decompresses
; [[cg_zcat|zcat]]: pipe contents of one or more (potentially compressed) files to stdout.
; [[cg_zst|zst]]: Compresses files using zstd

=== Mapping ===
; [[cg_map|map]]: align reads in fastq files to a reference genome using a variety of methods

=== Rna-seq ===
; [[cg_iso_isoquant|iso_isoquant]]: Call and count isoforms and genes using isoquant.

=== Dev ===
; [[cg_qsub|qsub]]: submit a command to the cluster (grid engine).
; [[cg_sh|sh]]: runs a shell in which genomecomb commands can be input and executed interactively.
; [[cg_source|source]]: runs a script (Tcl) with all commands/extensions from genomecomb available.
; [[cg_tsvdiff|tsvdiff]]: compare tsv files

=== Tools ===
; [[cg_cplinked|cplinked]]: create a copy of a directory where each file in it is a softlink to the src.
; [[cg_hardsync|hardsync]]: creates a hardlinked copy of a directory in another location
; [[cg_mklink|mklink]]: Create softlinks (improved)
