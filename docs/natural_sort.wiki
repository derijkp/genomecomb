= natural sort =

Most software uses an ASCII or lexical sort. This often results in an order that is
unexpected by most people, e.g. chr11 sorted before chr2. 
A natural sort interprets strings with embedded numbers in a way that
seems more natural to most people (e.g. chr1,chr2,chr11)

All sorting in genomecomb uses a natural sort that can sort both strings and numbers as
well as combinations of these. This sorting is very important because most
of the genomecomb tools process large files without loading them into
memory by going over them line by line. This is only possible if they are properly sorted.

There is no standard, well defined way to do a natural sort.
While the chr2,chr11 case is obvious, there are quite a few less clear
cases with multiple possible ways to handle them. Files sorted using
another natural sort algorithm might run into these.
Below is descibed how genomecomb handles natural sort:

* Strings are sorted alphabetically, based largely on ASCII order (Things like locale 
or unicode are not taken into account) with the following changes:
** asterisk (*) sorts after everything except control+space (this gets sam files to sort automatically as expected without further processing )
** The plus character (+) sorts right after the digits (and thus also after -)
** Numbers sort before letters and other characters, but are treated specially (see further).
** letters sort as A,a,B,... Case is not taken into account except as a secondary measure
(if the strings are the same except for case) when sorting, e.g: A a MRNA mRNA mrna
** The characters that are between the upper and lower case letters in ASCII ([,\,],^,_,`) sort after the letters

* Numbers are sorted according to their numerical value; they sort before strings, except strings
starting with whitespace. 

* Elements are recognized as a (full/isolated) number if they conform to the
number pattern (up to -10.10e-10) at the start of the element or after
whitespace. If the element starts with a 0, followed by a digit, it is not considered
a nuber (e.g. 01 0020 are treated as strings, not numbers, 0 and e.g. 0.1 are treated as numbers)
Numbers are sorted according to their numerical value, taking into account
negative, decimal and scientific notation for sorting; they sort before
strings, except strings starting with whitespace or an asterix (*), e.g:
-1e4 -100 -0.5e2 -2 -1 -0.2 -0.10 -0.1 0 0.1 0.10 0.2 2 10 1e2

* Even if isolated numbers have string characters AFTER them, they will be
interpreted as full numbers, e.g: 0.1g 0.10g 0.2g

* Embedded numbers are numbers that are not at the start of an element
(e.g. chr1,chr2,chr10). Embedded numbers are also sorted according to
numerical value, but only based on the integer part (i.e if present -,e,+
are considered part of the string in this case). e.g. in chr-1 we do not
interpret the - as a minus, giving us the following sort: chr-1 chr-2 chr-10

* characters after a full number (not separated by whitespace) will be 
interpreted as a string. Numbers in these are treated as embedded numbers, (e.g.:
-2 -1a -1a2 -1a10), even if it would be a number on its own (e.g.: -2 -1-1 -1-2 -1-10)


